{"ast":null,"code":"var _jsxFileName = \"/home/firdos/WORKDIR/Git-Repos/Dashboard-mock-up-in-React-js-and-chart-js/src/components/dash-widget/doughnut.js\";\nimport React from \"react\";\nimport Chart from \"chart.js\";\n\nclass DoughnutChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.myChart.data.labels = this.props.data.map(d => d.label);\n    this.myChart.data.datasets[0].davta = this.props.data.map(d => d.value);\n    this.myChart.update();\n  }\n\n  componentDidMount() {\n    this.myChart = new Chart(this.canvasRef.current, {\n      type: \"doughnut\",\n      options: {\n        elements: {\n          arc: {\n            borderWidth: 0\n          }\n        },\n        cutoutPercentage: 70,\n        maintainAspectRatio: false,\n        legend: {\n          display: false,\n          position: \"bottom\",\n          labels: {\n            // fontColor: \"#333\",\n            fontFamily: \"Roboto,Arial,sans-serif\"\n          }\n        }\n      },\n      data: {\n        labels: this.props.data.map(d => d.label),\n        datasets: [{\n          data: this.props.data.map(d => d.value),\n          backgroundColor: this.props.colors\n        }]\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        height: \"calc(100% - 60px)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default DoughnutChart;","map":{"version":3,"sources":["/home/firdos/WORKDIR/Git-Repos/Dashboard-mock-up-in-React-js-and-chart-js/src/components/dash-widget/doughnut.js"],"names":["React","Chart","DoughnutChart","Component","constructor","props","canvasRef","createRef","componentDidUpdate","myChart","data","labels","map","d","label","datasets","davta","value","update","componentDidMount","current","type","options","elements","arc","borderWidth","cutoutPercentage","maintainAspectRatio","legend","display","position","fontFamily","backgroundColor","colors","render","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AACA,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA4C;AAC1CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiBN,KAAK,CAACO,SAAN,EAAjB;AACD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,OAAL,CAAaC,IAAb,CAAkBC,MAAlB,GAA2B,KAAKN,KAAL,CAAWK,IAAX,CAAgBE,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACC,KAA3B,CAA3B;AACA,SAAKL,OAAL,CAAaC,IAAb,CAAkBK,QAAlB,CAA2B,CAA3B,EAA8BC,KAA9B,GAAsC,KAAKX,KAAL,CAAWK,IAAX,CAAgBE,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACI,KAA3B,CAAtC;AACA,SAAKR,OAAL,CAAaS,MAAb;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,OAAL,GAAe,IAAIR,KAAJ,CAAU,KAAKK,SAAL,CAAec,OAAzB,EAAkC;AAC/CC,MAAAA,IAAI,EAAE,UADyC;AAE/CC,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,GAAG,EAAE;AACHC,YAAAA,WAAW,EAAE;AADV;AADG,SADH;AAMPC,QAAAA,gBAAgB,EAAE,EANX;AAOPC,QAAAA,mBAAmB,EAAE,KAPd;AAQPC,QAAAA,MAAM,EAAE;AACNC,UAAAA,OAAO,EAAE,KADH;AAENC,UAAAA,QAAQ,EAAE,QAFJ;AAGNnB,UAAAA,MAAM,EAAE;AACN;AACAoB,YAAAA,UAAU,EAAE;AAFN;AAHF;AARD,OAFsC;AAmB/CrB,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAE,KAAKN,KAAL,CAAWK,IAAX,CAAgBE,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACC,KAA3B,CADJ;AAEJC,QAAAA,QAAQ,EAAE,CACR;AACEL,UAAAA,IAAI,EAAE,KAAKL,KAAL,CAAWK,IAAX,CAAgBE,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACI,KAA3B,CADR;AAEEe,UAAAA,eAAe,EAAE,KAAK3B,KAAL,CAAW4B;AAF9B,SADQ;AAFN;AAnByC,KAAlC,CAAf;AA6BD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,GAAG,EAAE,KAAK7B,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AAlDyC;;AAoD5C,eAAeJ,aAAf","sourcesContent":["import React from \"react\";\nimport Chart from \"chart.js\";\nclass DoughnutChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.myChart.data.labels = this.props.data.map(d => d.label);\n    this.myChart.data.datasets[0].davta = this.props.data.map(d => d.value);\n    this.myChart.update();\n  }\n\n  componentDidMount() {\n    this.myChart = new Chart(this.canvasRef.current, {\n      type: \"doughnut\",\n      options: {\n        elements: {\n          arc: {\n            borderWidth: 0\n          }\n        },\n        cutoutPercentage: 70,\n        maintainAspectRatio: false,\n        legend: {\n          display: false,\n          position: \"bottom\",\n          labels: {\n            // fontColor: \"#333\",\n            fontFamily: \"Roboto,Arial,sans-serif\"\n          }\n        }\n      },\n      data: {\n        labels: this.props.data.map(d => d.label),\n        datasets: [\n          {\n            data: this.props.data.map(d => d.value),\n            backgroundColor: this.props.colors\n          }\n        ]\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ height: \"calc(100% - 60px)\" }}>\n        <canvas ref={this.canvasRef} />\n      </div>\n    );\n  }\n}\nexport default DoughnutChart;\n"]},"metadata":{},"sourceType":"module"}